# Secret store is inherited from the minio chart
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: "{{ .Release.Namespace }}-harbor-external-secret"
  namespace: {{ .Release.Namespace }}
spec:
  secretStoreRef:
    name: "{{ .Release.Name }}-secret-store"
    kind: SecretStore
  target:
    name: harbor-s3-secret
    creationPolicy: Owner
    deletionPolicy: Delete
    template:
      engineVersion: v2
      data:
        REGISTRY_STORAGE_S3_ACCESSKEY: 'root'
        REGISTRY_STORAGE_S3_SECRETKEY: '{{ `{{ .password }}` }}'
  data:
  - secretKey: password
    remoteRef:
      key: "random-minio-password-secret"
      property: password
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Namespace }}-admin-random-password-secret
spec:
  template:
    spec:
      containers:
      - name: secret-generator
        image: bitnami/kubectl
        command:
        - /bin/sh
        - -c
        - |
          if ! kubectl get secret {{ .Release.Namespace }}-admin-random-password-secret &>/dev/null; then
            RANDOM_VALUE=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)
            kubectl create secret generic {{ .Release.Namespace }}-admin-random-password-secret --from-literal=password="$RANDOM_VALUE"
            echo "Secret created successfully"
          else
            echo "Secret already exists, skipping creation"
          fi
      serviceAccountName: {{ .Release.Name }}-secret-creator
      restartPolicy: Never
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: "{{ .Release.Namespace }}-admin-external-secret"
  namespace: {{ .Release.Namespace }}
spec:
  secretStoreRef:
    name: "{{ .Release.Name }}-secret-store"
    kind: SecretStore
  target:
    name: harbor-admin-secret
    creationPolicy: Owner
    deletionPolicy: Delete
    template:
      engineVersion: v2
      data:
        HARBOR_ADMIN_PASSWORD: "{{ `{{ .password }}` }}"
  data:
  - secretKey: password
    remoteRef:
      key: "{{ .Release.Namespace }}-admin-random-password-secret"
      property: password
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Namespace }}-secretkey-random-password-secret
spec:
  template:
    spec:
      containers:
      - name: secret-generator
        image: bitnami/kubectl
        command:
        - /bin/sh
        - -c
        - |
          if ! kubectl get secret {{ .Release.Namespace }}-secretkey-random-password-secret &>/dev/null; then
            RANDOM_VALUE=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)
            kubectl create secret generic {{ .Release.Namespace }}-secretkey-random-password-secret --from-literal=password="$RANDOM_VALUE"
            echo "Secret created successfully"
          else
            echo "Secret already exists, skipping creation"
          fi
      serviceAccountName: {{ .Release.Name }}-secret-creator
      restartPolicy: Never
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: "{{ .Release.Namespace }}-secretkey-external-secret"
  namespace: {{ .Release.Namespace }}
spec:
  secretStoreRef:
    name: "{{ .Release.Name }}-secret-store"
    kind: SecretStore
  target:
    name: harbor-secretkey-secret
    creationPolicy: Owner
    deletionPolicy: Delete
    template:
      engineVersion: v2
      data:
        secretKey: "{{ `{{ .password }}` }}"
  data:
  - secretKey: password
    remoteRef:
      key: "{{ .Release.Namespace }}-secretkey-random-password-secret"
      property: password
